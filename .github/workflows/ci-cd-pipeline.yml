name: CI/CD Pipeline for React App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Node.js 18.20.8
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.20.8'  # Set Node.js version to 18.20.8

      # Cache npm dependencies
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Build the React app
      - name: Build React app
        run: npm run build  # Build the React app for production

      # Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/react-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout the code again in the deploy job
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up SSH for deployment
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Deploy to your Debian server
      - name: Deploy to Debian server
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          ssh -o StrictHostKeyChecking=no ber@193.180.208.245 << EOF
            set -e
            echo "Pulling image from Docker Hub..."
            docker pull ${DOCKER_USERNAME}/react-app:latest

            echo "Stopping old container if it exists..."
            docker stop react-app || true
            docker rm react-app || true

            echo "Running new container..."
            docker run -d --restart=unless-stopped --name react-app -p 80:80 ${DOCKER_USERNAME}/react-app:latest
          EOF
